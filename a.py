from flask import Flask, render_template, request, jsonify
import pandas as pd

app = Flask(__name__, template_folder='templates')

# Load the Excel file and store it globally
excel_file_path = r"C:\Users\chikk\OneDrive\Desktop\Internship project\Ascend International\Flask final code\891A3420.xlsx"
excel_data = pd.ExcelFile(excel_file_path)

@app.route('/')
def index():
    return render_template('index.html', sheet_selection=get_attack_data())

def get_attack_data():
    try:
        # Get sheet names from the Excel file
        sheet_names = excel_data.sheet_names

        # Display sheet names to the user
        sheet_selection = ""
        for i, sheet_name in enumerate(sheet_names, start=1):
            sheet_selection += "<option value='{}'>{}</option>".format(i, sheet_name)

        return sheet_selection

    except Exception as e:
        return "An error occurred: {}".format(str(e))

@app.route('/result', methods=['POST'])
def display_attack_data():
    try:
        # Read data from the selected sheet
        selected_sheet_index = int(request.form['sheet']) - 1
        selected_sheet_name = excel_data.sheet_names[selected_sheet_index]
        sheet_data = excel_data.parse(selected_sheet_name, encoding='utf-8')  # Specify the encoding

        # Get unique attack types from the selected sheet
        attack_options = sheet_data['TYPE OF ATTACK'].unique()

        # Filter data based on selected type of attack
        filtered_data = sheet_data[sheet_data['TYPE OF ATTACK'] == request.form['attack']]

        # Sanitize the attack options before returning
        attack_options = [str(option) for option in attack_options]

        # Check if the 'DISCRIPTION', 'SEVERITY', and 'PRIMARY MITIGATIONS' columns exist
        required_columns = ['DISCRIPTION', 'SEVERITY', 'PRIMARY MITIGATIONS']
        for col in required_columns:
            if col not in filtered_data.columns:
                return f"The '{col}' column does not exist in the DataFrame."

        # Display details in a table
        result = "<table border='1'><tr><th>CVE</th><th>DESCRIPTION</th><th>SEVERITY</th><th>PRIMARY MITIGATIONS</th></tr>"
        for index, row in filtered_data.iterrows():
            result += "<tr><td>{}</td><td>{}</td><td>{}</td><td>{}</td></tr>".format(
                row['CVE'], row['DISCRIPTION'], row['SEVERITY'], row['PRIMARY MITIGATIONS']
            )

        result += "</table>"

        return result

    except Exception as e:
        return "An error occurred: {}".format(str(e))

@app.route('/attack_options/<int:sheet_index>')
def attack_options(sheet_index):
    try:
        selected_sheet_name = excel_data.sheet_names[sheet_index - 1]
        sheet_data = excel_data.parse(selected_sheet_name, encoding='utf-8')  # Specify the encoding

        # Get unique attack types from the selected sheet
        attack_options = sheet_data['TYPE OF ATTACK'].unique()

        # Sanitize the attack options before returning
        attack_options = [str(option) for option in attack_options]

        return jsonify(attack_options)

    except Exception as e:
        return jsonify({"error": "An error occurred: {}".format(str(e))})

if __name__ == '__main__':
    app.run(debug=True)
